#!/usr/bin/env bash

#+
# This script starts a VM to run CeranaOS.
#
# NOTE: This script is intended to be used as part of an automated test and
# requires a network as setup by vm-network.
#
# NOTE: In order to start kvm on some systems it may be necessary to add
# the user to the kvm group. e.g. sudo useradd <user> kvm
# A clue this is necessary is when the following complaint occurs:
#   Could not access KVM kernel module: Permisssion denied
#-

source `dirname "$(readlink -f "$0")"`/cerana-functions.sh

usage () {
cat << EOF
Usage: $0 [options]
    Use this script to start a virtual machine running CeranaOS.

    The default is to use images produced from the most recent build.

    NOTE: To exit the OS use the ^A-X pattern.

    Options:
    ==== CeranaOS ====
    --ceranaimagedir <dir>
        Where the CeranaOS kernel and initrd images are stored.
        This option is saved in the file:
        $testceranastatedir/ceranaimagedir
        [ceranaimagedir = $ceranaimagedir]
    --kernelimage <image>
        The kernel image to boot into the VM. This image must be stored in
        $ceranaimagedir.
        This option is saved in the file:
        $testceranastatedir/kernelimage
        [kernelimage = $kernelimage]
    --initrdimage <image>
        The RAM file system image (initrd) to boot into the VM. This image must
        be stored in $ceranaimagedir.
        This option is saved in the file:
        $testceranastatedir/initrdimage
        [initrdimage = $initrdimage]
    --isoimage <image>
        The CDROM image (iso) to boot when the --iso option is used. This image
        must be stored in $ceranaimagedir.
        This option is saved in the file:
        $testceranastatedir/isoimage
        [initrdimage = $isoimage]
    ==== Target Options ====
    --diskimagedir <dir>
        Where the disk images are stored.
        This option is saved in the file:
        $testceranastatedir/ceranaimagedir
        [diskimagedir = $diskimagedir]
    --diskimage
        The name file to use for the test disk image. If the file is created if
        it does not exist.
        This option is saved in the file:
        $testceranastatedir/diskimage
        [diskimage = $diskimage]
    --numdisks <n>
        The number of disk images per VM.
        This option is saved in the file:
        $testceranastatedir/numdisks
        [numdisks = $numdisks]
    --diskimagesize <size>
        The size of the disk image to use. e.g. 1G = 1 gigabyte.
        This option is saved in the file:
        $testceranastatedir/diskimagesize
        [diskimagesize = $diskimagesize]
    --uuid <uuid>
        Use this to specify the UUID to associate with the CeranaOS instance
        running in the VM. To create a random UUID use "default" for this
        option. The UUID must be the correct format for a UUID (a requirement of
        kvm). The last two characters of the UUID are replaced with the tapset
        number. The full UUID becomes:
        `printf "%.34s%02x" $uuid $tapset`
        This option is saved in the file:
        $testceranastatedir/uuid
        [uuid = $uuid]
    ==== Network ====
    --tap <tap>
        The root name of the tap interface. This uses the value set by the
        vm-network script.
        This option defaults to the interface created by the vm-network script.
        [tap = $tap]
    --tapset <set>
        NOTE: This needs to become a VM number which will then match a tapset.
        Which TAP interface set to use for the VM. The TAP interface set can also
        be thought of as an ID for the VM being started. e.g. VM 1 uses TAP set 1.
        [tapset = $tapset]
    --numvmif <n>
        The number of tap interfaces to use for this VM.
        Each interface becomes $tap.$tapset.1, $tap.$tapset.2 etc.
        [numvmif = $numvmif]
    --macbase <macbase>
        Use a specific MAC address for the management interface. The default is
        to use a MAC starting with DE:AD:BE:EF
        This option is saved in the file:
        $testceranastatedir/macbase
        [macbase = $macbase]
    === Boot Options ===
    --boot <device>
        Boots using a specific device.
        initrd = Boot using bzImage and initrd
        iso = Boot using an ISO (CDROM image)
        net = Boot via the network
        This option is saved in the file:
        $testceranastatedir/boot
        [boot = $boot]
    --pxeoptionrom
        The option ROM image to use for a network boot.
        This option is saved in the file:
        $testceranastatedir/pxeoptionrom
        [pxeoptionrom = $pxeoptionrom]
    --rammb <megabytes>
        The amount of RAM to allocate to the virtual machine (in megabytes).
        This option is saved in the file:
        $testceranastatedir/rammb
        [rammb = $rammb]
    --ramdisksize <kilobytes>
        The amount of RAM to allocate to the ram disk (in kilobytes).
        NOTE: If this is not sufficient for the actual RAM disk the kernel will
        default to half of avialable RAM.
        This option is saved in the file:
        $testceranastatedir/ramdisksize
        [ramdisksize = $ramdisksize]
    ==== Image Download ====
    --download
        Download the CeranaOS images into the image directory and boot those.
    --downloadurl <URL>
        The base URL to download from. NOTE: This assumes a directory structure
        created by a Jenkins job. The full URL becomes:
            <downloadurl>/<job>/<build>
        This option is saved in the file:
        $testceranastatedir/downloadurl
        [downloadurl = $downloadurl]
    --job <job>
        The name of the Jenkins job to download from.
        This option is saved in the file:
        $testceranastatedir/job
        [job = $job]
    --build <build>
        The Jenkins build number to download from.
        This option is saved in the file:
        $testceranastatedir/build
        [build = $build]
    ==== Other ====
    --resetdefaults
        Reset options back to their default values.
    --verbose
        Enble verbose output from this script.
    --dryrun
        Just showing what will happen with this script.
   --help
        Show this help information.
EOF
}

#+
# Handle the command line options.
#-
a=`getopt -l "\
ceranaimagedir:,\
kernelimage:,\
initrdimage:,\
isoimage:,\
diskimagedir:,\
diskimage:,\
numdisks:,\
diskimagesize:,\
uuid:,\
tap:,\
tapset:,\
numvmif:,\
macbase:,\
boot:,\
pxeoptionrom:,\
rammb:,\
ramdisksize:,\
download,\
downloadurl:,\
job:,\
build:,\
resetdefaults,\
verbose,\
dryrun,\
help" \
   -o "h" -- "$@"`

if [ $? -gt 0 ]; then
    usage
    exit 1
fi

eval set -- $a

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            shift
            break
            ;;
        --ceranaimagedir)
            ceranaimagedir=$2
            shift
            ;;
        --kernelimage)
            kernelimage=$2
            shift
            ;;
        --initrdimage)
            initrdimage=$2
            shift
            ;;
        --isoimage)
            isoimage=$2
            shift
            ;;
        --diskimagedir)
            diskimagedir=$2
            shift
            ;;
        --diskimage)
            diskimage=$2
            shift
            ;;
        --numdisks)
            numdisks=$2
            shift
            ;;
        --diskimagesize)
            diskimagesize=$2
            shift
            ;;
        --uuid)
            uuid=$2
            shift
            ;;
        --tap)
            tap=$2
            shift
            ;;
        --tapset)
            tapset=$2
            shift
            ;;
        --numvmif)
            numvmif=$2
            shift
            ;;
        --macbase)
            macbase=$2
            shift
            ;;
        --pxeoptionrom)
            pxeoptionrom=$2
            shift
            ;;
        --boot)
            boot=$2
            shift
            ;;
        --rammb)
            rammb=$2
            shift
            ;;
        --ramdisksize)
            ramdisksize=$2
            shift
            ;;
        --download)
            download=y
            ;;
        --downloadurl)
            downloadurl=$2
            shift
            ;;
        --job)
            job=$2
            shift
            ;;
        --build)
            build=$2
            shift
            ;;
        --resetdefaults)
            resetdefaults=y
            ;;
        --verbose)
            verbose=y
            ;;
        --dryrun)
            dryrun=echo
            ;;
        -h|--help)
            showusage=y
            ;;
        # using getopt should avoid needing this catchall but just in case...
        *)
            error "Invalid option: $1"
            showusage=y
            errorexit=y
            ;;
    esac
    shift
done

statevars=(
    ceranaimagedir=artifacts
    kernelimage=bzImage
    initrdimage=initrd
    isoimage=cerana.iso
    diskimagedir=images
    diskimage=sas
    numdisks=1
    diskimagesize=1G
    tap=tap
    tapset=1
    numvmif=1
    macbase=DE:AD:BE:EF
    uuid=`uuidgen`
    pxeoptionrom=/usr/share/qemu/pxe-virtio.rom
    boot=initrd
    rammb=3096
    ramdisksize=200000
    downloadurl=http://omniti-cerana-artifacts.s3.amazonaws.com/CeranaOS/jobs
    job=build-cerana
    build=""
)
for v in "${statevars[@]}"
do
    if [ ! -z "$resetdefaults" ]; then
        clear_test_variable $v
    fi
    init_test_variable $v
done

if [ ! -z "$showusage" ]; then
    usage
    if [ ! -z "$errorexit" ]; then
        exit 1
    fi
    exit 0
fi

message CeranaOS image directory is: $ceranaimagedir

verbose The instance UUID is: $uuid
verbose TAP device is: $tap
verbose The VM MAC base address is: $macbase
u=`printf "%.34s%02x" $uuid $tapset`
verbose VM UUID = $u

if [ -n "$download" ]; then
    if [ -z "$build" ]; then
        die The build number has not been specified.
    fi
    verbose Downloading $job/$build images
    run mkdir -p $ceranaimagedir/$job/$build
    for f in bzImage initrd cerana.iso
    do
        df=$ceranaimagedir/$job/$build/$f
        verbose df
        # TODO Added verification of MD5 sums.
        if [ -e $df ]; then
            message File $df exists.
        else
            run curl -o $df \
                $downloadurl/$job/$build/$f
        fi
    done
    verbose Setting image symlinks.
    for f in $kernelimage $initrdimage $isoimage
    do
        verbose Checking $f for symlink.
        e=0
        if [ -e  $ceranaimagedir/$f ]; then
            if [ -h $ceranaimagedir/$f ]; then
                verbose Replacing symlink $ceranaimagedir/$f
                rm $ceranaimagedir/$f
            else
                error Cannot replace file $ceranaimagedir/$f with a symlink.
                e=1
            fi
        else
            verbose The file  $ceranaimagedir/$f does not exist.
        fi
    done
    if [ $e -gt 0 ]; then
        die Files exist. Either remove them or use a different image directory.
    fi
    run ln -s $ceranaimagedir/$job/$build/bzImage $ceranaimagedir/$kernelimage
    run ln -s $ceranaimagedir/$job/$build/initrd $ceranaimagedir/$initrdimage
    run ln -s $ceranaimagedir/$job/$build/cerana.iso $ceranaimagedir/$isoimage
fi

if [ ! -d "$ceranaimagedir" ]; then
    die "The CeranaOS image directory doesn't exist."
fi

disklist=""
for n in $(seq $numdisks); do
    i=$diskimagedir/$diskimage-$tapset-$n.img
    if [ ! -e "$i" ]; then
        warning "Disk image doesn't exist."
        warning "Creating $i"
        if [ -n "$dryrun" ]; then
            message Will create $i of size $diskimagesize
        else
            run mkdir -p $diskimagedir
            run qemu-img create -f raw -o size=$diskimagesize $i
        fi
        if [ $? -gt 0 ]; then
            die Error when attempting to create the disk image: $i
        fi
    fi
    verbose Adding test disk image: $i
    disklist+="\
        -drive if=virtio,file=$i"
done

devicelist=""

for n in $(seq 1 $numvmif); do
    m=$macbase:`printf "8%01X:%02X" $tapset $n`
    t=$tap.$tapset.$n
    verbose Adding device $t using mac $m
    devicelist+="\
        -device e1000,netdev=net$n,mac=$m \
        -netdev tap,ifname=$t,id=net$n,script=no"
done

commonoptions="\
    -machine accel=kvm -cpu host -smp 2 \
    -uuid $u \
    -global isa-fdc.driveA= \
    -nographic -m $rammb"

if [ -n "$dryrun" ]; then
    message "Just a dry run -- not starting the VM."
fi

tip "Starting virtual machine (remember ^A-X to exit)."
case "$boot" in
    initrd)
        verbose Booting kernel and initrd images.
        kernel=$ceranaimagedir/$kernelimage
        initrd=$ceranaimagedir/$initrdimage
        if [ ! -e $kernel ]; then
            die Kernel image $kernel does not exist.
        fi
        verbose The kernel image is: $kernel

        if [ ! -e $initrd ]; then
            die Initrd image $initrd does not exist.
        fi
        verbose The initrd image is: $initrd

        $dryrun kvm \
        $commonoptions \
        $disklist \
        $devicelist \
        -kernel $kernel \
        -initrd $initrd \
        -append "noapic acpi=off console=ttyS0 cerana.zfs_config=auto"
        ;;

    iso)
        iso=$ceranaimagedir/$isoimage
        if [ ! -e $iso ]; then
            die ISO $iso does not exist.
        fi

        verbose Booting from ISO image.
        $dryrun kvm \
        $commonoptions \
        $disklist \
        $devicelist \
        -cdrom $iso \
        -boot d
        ;;

    net)
        verbose Booting from ISO image.
        $dryrun kvm \
        $commonoptions \
        $disklist \
        $devicelist \
        -option-rom $pxeoptionrom -boot n
        ;;

    *)
        error "Invalid boot option: $boot"
        usage
        exit 1
        ;;
esac

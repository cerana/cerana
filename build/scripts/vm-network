#!/usr/bin/env bash

#+
# This script configures the network interfaces and bridges for testing
# CeranaOS within a qemu/kvm virtual machine. It creates a bridge named
# <BRIDGE> and a tap interface named <TAP> which is then added to the bridge.
# The bridge IP address is set to the address <IP> and masked to
# 255.255.255.0.
#
# Because CeranaOS relies upon dhcp a dhcp server is started which is
# configured to listen on the 10.0.2.0 subnet.
#
# NOTE: It is assumed this script is invoked from the same directory in which
# the testcerana script resides.
#-
source `dirname "$(readlink -f "$0")"`/cerana-functions.sh

dhcpdconf=$testceranastatedir/$id-dhcpd.conf
dhcpdpidfile=$testceranastatedir/$id-dhcpd-pid
leasesfile=$testceranastatedir/$id-dhcpd-leases

statevars=(
    tap=ceranatap
    numtaps=1
    numsets=1
    tapmac=DE:AD:BE:EF
    bridge=ceranabr
    bridgeip=10.0.3.1
    nameserver=10.0.3.1
    maskbits=24
    dhcprange=200-240
)

u=$USER

usage () {
    warning +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    message This script uses sudo to run as root and can break an existing
    message network configuration. Use with caution!
    message This script supports options for the interface names and IP
    message configuration. If these options are used instead of the defaults
    message be sure to use unique values or confusing and non-functional
    message network configurations can be the result.
    message NOTE: If your system is running apparmor the configuration may
    message prevent execution of dhcpd. If that is the case it is necessary
    message to disable the dhcpcd profile.
    message e.g. sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.dhcpd
    warning ----------------------------------------------------------------

    cat << EOF
Usage: $0 [options]
    Use this script to configure the local network for testing CeranaOS within
    a virtual machine.

    The script first checks to see if the required bridge and tap network
    interface already exist. If so then nothing is changed.

    NOTE: This script is intended to be called once but if called again
    will check the configuration and repair missing parts if necessary.

    Options:
    === Network ===
    --tap <tap>
        The root name of the tap interface to use.
        [tap = $tap]
    --numsets <n>
        Number of tap sets to create. Each VM should use a different set.
        Each interface becomes $tap.<setnumber>.<tapnumber>
        [numsets = $numsets]
    --numtaps <n>
        The number of tap interfaces to create for each tap set. This also
        determines the number of bridges created.
        Each interface becomes $tap.<setnumber>.1, $tap.<setnumber>.2 etc.
        [numtaps = $numtaps]
    --tapmac <macbase>
        The first 4 bytes of the mac address to assign to each TAP interface.
        The 5th byte is the TAP set number (e.g. 01 thru $numsets)
        The last or 6th byte is the TAP number (e.g. 01 thru $numtaps).
        [tapmac = $tapmac]
    --bridge <bridge>
        The name of the bridge to create. One bridge is created for each tap
        in a tap set.
        The name of each bridge becomes $bridge.<tapnumber>.
        [bridge = $bridge]
    --bridgeip <ip>
        The IP address to assign to the first bridge.
        NOTE: Only the first bridge ($bridge.1) is assigned an IP address.
        The DHCP server is configured to listen only on the first bridge
        (e.g. $bridgeip).
        [bridgeip = $bridgeip]
    --maskbits <bits>
        The number of bits for the network mask applied to each bridge. In most
        cases this should be 16 when using multiple bridges. When only a
        single bridge is used (numtaps = 1) 24 is appropriate.
        [maskbits = $maskbits]
    --nameserver <ip>
        The IP of the name server for the dhcpd to serve to VMs.
        [nameserver=$nameserver]
    --dhcprange <start>-<end>
        The last octets of the IP address range the dhcp server will assign.
        [dhcprange=$dhcprange]
    === Shutdown ===
    --shutdown
        Shutdown the interfaces and services created by this script.
    --shutdowndhcpd
        Shutdown only the dhcpd daemon. This is useful when a VM will be running
        a dhcp server.
    --nodhcpd
        Do not start the dhcpd daemon.
    === Other ===
    --config <config>
        Which network configuration to use. This allows a variety of network
        configurations to be used. If a different configuration is specified
        the first configuration is shutdown before setting up the new configuration.
        [config = $config]
    --removeconfig <config>
        Remove the named configuration. NOTE: If this is the same as the current
        configuration then the current configuration will be reset the next
        time this script is run.
    --showconfigs
        List current configurations.
    --resetdefaults
        Reset options back to their default values.
    --verbose
        Enable verbose output from this script.
    --dryrun
        Only show what would be done rather than actually change anything.
    --help
        Show this help information.
EOF
}

function check_installed() {
    p=`which $1`
    code=$?
    if [ $code -gt 0 ]; then
        error The utility $1 is not installed.
    else
        message Using $p.
    fi
    return $code
}

function check_interface_exists() {
    ip addr show dev $1
    return $?
}

function check_interface_in_bridge() {
    # Parameters:
    #   1: The interface which is part of the bridge
    #   2: The bridge
    ip link show $1 | grep $2
    return $?
}

function shutdowndhcpd() {
    verbose Shutting down the dhcp server.
    ps -C dhcpd
    if [ $? -gt 0 ]; then
        message  The dhcp server is not running.
    else
        ps -fp `pgrep dhcpd` | grep $dhcpdconf
        if [ $? -gt 0 ]; then
            warning The DHCP server may not be configured for using a CeranaOS VM.
            warning It is possible it was started by another user with the correct
            warning configuration.
            warning To manually shut down: sudo kill `pidof dhdpc`
        else
            message Shutting down the dhcp server.
            sudo kill `pidof dhcpd`
            message  The dhcp server has been shut down.
        fi
    fi
}

function shutdown() {
    # Parameters:
    #   1: The base name of the bridges.
    #   2: The root name of the tap interface
    #   3: The number of bridges (taps per tap set)
    shutdowndhcpd
    for n in $(seq 1 $3); do
        b=$1.$n
        verbose Checking bridge $b
        check_interface_exists $b
        if [ $? -eq 0 ]; then
            sudo ip link set $b down
            for i in `brctl showstp $b | grep $2 | cut -d ' ' -f 1`
            do
                check_interface_exists $i
                if [ $? -eq 0 ]; then
                    verbose Shutting down $i
                    sudo ip link set dev $i nomaster
                    sudo tunctl -d $i
                else
                    warn Interface $i does not exist.
                fi
            done
            sudo ip link delete $b
        else
            error Bridge $b does not exist.
        fi
    done
}

function init_variables () {
    # Parameters:
    #   1: The name of the configuration to use.
    for v in "${statevars[@]}"
    do
        init_test_variable $1/$v
    done
}

function build_bridges () {
    # Parameters:
    #   1: The number of bridges to build.
    #   2: The base name for each bridge.
    for n in $(seq 1 $1); do
        b=$2.$n
        message Checking if bridge $b exists.
        check_interface_exists $b
        if [ $? -gt 0 ]; then
            if [ -z "$dryrun" ]; then
                sudo ip link add name $b type bridge
            else
                verbose Create $b.
            fi
            if [ $? -gt 0 ]; then
                die Could not create bridge $b.
            else
                message Created bridge: $b.
            fi
        else
            message The bridge $b already exists.
        fi
    done
}

function set_bridge_1_address () {
    # Parameters:
    #   1: The base name for each bridge.
    #   2: The base IP address for each bridge.
    b=$1.1
    bip=$2
    message Checking bridge IP address: $bip.
    ip addr show dev $b | grep $bip
    if [ $? -gt 0 ]; then
        message Setting bridge $b IP address to $bip.
        if [ -z "$dryrun" ]; then
            sudo ip addr change $bip/$maskbits dev $b
        else
            verbose Set bridge IP to $bip.
        fi
    else
        message The bridge IP address was already set to $bip.
    fi
}

function enable_bridges () {
    # Parameters:
    #   1: The number of bridges to enable.
    #   2: The base name for each bridge.
    for n in $(seq 1 $1); do
        b=$2.$n
        message Enabling bridge $b.
        ip link show $b | grep ",UP"
        if [ $? -gt 0 ]; then
            message Enabling the bridge device $b.
            run sudo ip link set dev $b up
            if [ $? -gt 0 ]; then
                die "Could not enable bridge $b."
            fi
        else
            message The bridge state is already UP.
        fi
    done
}

function build_taps () {
    # Parameters:
    #   1: The number of tap sets to build.
    #   2: The number of taps per taps set to build.
    for s in $(seq 1 $1); do
        for n in $(seq 1 $2); do
            i=$tap.$s.$n
            message Checking if interface $i exists.
            check_interface_exists $i
            if [ $? -gt 0 ]; then
                message Creating device $i.
                m=$tapmac:`printf "%02X:%02X" $s $n`
                verbose Using mac address $m for interface $i.
                run sudo tunctl -u $u -t $i
                run sudo ip link set $i address $m
            else
                message The tunnel device $i already exists.
            fi

            b=$bridge.$n
            message Checking if interface $i is part of bridge $b.
            check_interface_in_bridge $i $b
            if [ $? -gt 0 ]; then
                message Adding device $i to bridge $b.
                run sudo ip link set dev $i master $b
                run sudo ip link set $i up
            else
                message The device $i is already part of bridge $b.
            fi
        done
    done
}

#+
# Handle the command line options.
#-
a=`getopt -l "\
tap:,\
numtaps:,\
numsets:,\
tapmac:,\
bridge:,\
bridgeip:,\
maskbits:,\
dhcprange:,\
nameserver:,\
config:,\
removeconfig:,\
showconfigs,\
shutdown,\
shutdowndhcpd,\
nodhcpd,\
resetdefaults,\
verbose,\
dryrun,\
help" \
   -o "h" -- "$@"`

if [ $? -gt 0 ]; then
    usage
    exit 1
fi

eval set -- $a

while [ $# -ge 1 ]; do
    case "$1" in
        --)
            shift
            break
            ;;
        --tap)
            tap=$2
            shift
            ;;
        --numtaps)
            numtaps=$2
            shift
            ;;
        --numsets)
            numsets=$2
            shift
            ;;
        --tapmac)
            tapmac=$2
            shift
            ;;
        --bridge)
            bridge=$2
            shift
            ;;
        --bridgeip)
            bridgeip=$2
            shift
            ;;
        --nameserver)
            nameserver=$2
            shift
            ;;
        --maskbits)
            maskbits=$2
            shift
            ;;
        --dhcprange)
            dhcprange=$2
            shift
            ;;
        --config)
            config=$2
            shift
            ;;
        --removeconfig)
            removeconfig=$2
            shift
            ;;
        --showconfigs)
            showconfigs=y
            ;;
        --shutdown)
            shutdown=y
            ;;
        --shutdowndhcpd)
            shutdowndhcpd=y
            ;;
        --nodhcpd)
            nodhcpd=y
            ;;
        --resetdefaults)
            resetdefaults=y
            ;;
        --verbose)
            verbose=y
            ;;
        --dryrun)
            dryrun=y
            ;;
        -h|--help)
            showusage=y
            ;;
        # using getopt should avoid needing this catchall but just in case...
        *)
            error "Invalid option: $1"
            showusage=y
            errorexit=y
            ;;
    esac
    shift
done

init_test_variable current=single
init_test_variable config=$current

message Current configuration is: $current
message New configuration is: $config

init_variables $config

if [ -n "$showconfigs" ]; then
    message Available configurations in $testceranastatedir:
    for d in `find $testceranastatedir/* -type d`; do
        message ++++++++++++++++++
        tip Config: `basename $d`
        for f in `ls $d`; do
            message $f = `cat $d/$f`
        done
        message ------------------
    done
    if [ -z "$showusage" ]; then
        exit 0
    fi
fi

if [ -n "$showusage" ]; then
    usage
    if [ ! -z "$errorexit" ]; then
        exit 1
    fi
    exit 0
fi

if [ -n "$removeconfig" ]; then
    message Removing configuration: $removeconfig
    if [ -d $testceranastatedir/$removeconfig ]; then
        warning Removing configuration: $removeconfig
        rm -rf $testceranastatedir/$removeconfig
        exit 0
    else
        die Configuration $removeconfig does not exist.
    fi
fi

if [ "$config" != "$current" ]; then
    verbose Switching from $current to $config
    b=$(get_test_default $current/bridge "" )
    t=$(get_test_default $current/tap "" )
    n=$(get_test_default $current/numtaps "" )
    shutdown $b $t $n
fi

set_test_default current $config

verbose The root TAP device is: $tap
verbose Number of TAP interface sets is: $numsets
verbose Number of TAP interfaces is: $numtaps
verbose Bridge device is: $bridge
verbose Bridge IP address is: $bridgeip
verbose Bridge device mask bits are: $maskbits
verbose The name server is: $nameserver

message Verifying tools.
for t in brctl tunctl ip dhcpd; do
    check_installed $t
    if [ $? -ge 0 ]; then
        e=$?
    fi
done

if [ $e -gt 0 ]; then
    die Needed tools are missing.
fi

if [ "$shutdown" == "y" ]; then
    message Shutting down VM related interfaces and services.
    shutdown $bridge $tap $numtaps
    message VM related interfaces and services have been shutdown.
    exit
fi

if [ "$shutdowndhcpd" == "y" ]; then
    message Shutting the dhcp server down.
    shutdowndhcpd
    exit
fi

message Checking $numtaps TAP interfaces.
# Create the TAP interfaces.
if [ $numsets -lt 1 ]; then
    die numsets: Must have at least 1 set.
fi
if [ $numsets -gt 9 ]; then
    die numsets: Too many interface sets \($numsets\) requested.
fi
if [ $numtaps -lt 1 ]; then
    die numtaps: Must hava at least 1 interface.
fi
if [ $numtaps -gt 4 ]; then
    die numtaps: Too many interfaces \($numtaps\) requested.
fi

build_bridges $numtaps $bridge
set_bridge_1_address $bridge $bridgeip

build_taps $numsets $numtaps

enable_bridges $numtaps $bridge

verbose Bridge IP:
subnet=`echo "$bridgeip" | awk -F'.' '{print $1,$2,$3}' OFS='.'`
message Configuring dhcp for listening on the first bridge interface $subnet.0.

dhcplow=`echo $dhcprange | cut -d '-' -f 1`
dhcphigh=`echo $dhcprange | cut -d '-' -f 2`

if [ -n "$dryrun" ]; then
    message The dhcp server would use subnet $subnet and serve IP range $dhcplow to $dhcphigh.
    message The dhcp config file is: $dhcpdconf
    message The leases file is: $leasesfile
    exit 0
fi

if [ -n "$nodhcpd" ]; then
    warning Not starting the DHCP daemon.
else
    ps -C dhcpd
    if [ $? -gt 0 ]; then
        message Using subnet $subnet.0
        run rm -f $dhcpdconf
        run sudo touch $leasesfile
        cat << EOF >>$dhcpdconf
        ###
        subnet $subnet.0 netmask 255.255.255.0 {
        range $subnet.$dhcplow $subnet.$dhcphigh;
        option broadcast-address $subnet.255;
        option routers $subnet.1;
        option domain-name-servers $nameserver;
        }
EOF
        message DHCP configuration written to $dhcpdconf
        message Starting DHCP server for subnet $subnet.0
        run sudo dhcpd -cf $dhcpdconf -lf $leasesfile -pf $dhcpdpidfile
        if [ $? -gt 0 ]; then
            die Could not start the dhcp server.
        else
            verbose The DHCP server process ID is: `cat $dhcpdpidfile`
        fi
    else
        message DHCP server is already running.
        ps -fp `pgrep dhcpd` | grep $dhcpdconf
        if [ $? -gt 0 ]; then
            warning The DHCP server may not be configured for using a CeranaOS VM.
            warning It is possible it was started by another user with the correct
            warning configuration.
        fi
    fi
fi
message Network is now configured for running a VM.
message Using the device $tap on the bridge $bridge.
